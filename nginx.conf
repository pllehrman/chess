events {}

http {
  # Redirect all HTTP traffic to HTTPS
  server {
    listen 80;
    server_name localhost;

    location / {
      return 301 https://$host$request_uri;
    }
  }

  server {
    # Listen on port 443 for HTTPS traffic
    listen 443 ssl;
    server_name localhost;

    # SSL certificates
    ssl_certificate /etc/nginx/certs/localhost.crt;
    ssl_certificate_key /etc/nginx/certs/localhost.key;

    # Serve frontend
    location / {
      proxy_pass http://frontend:3000;  # Pass traffic to the frontend service
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      # Handle WebSocket connections for hot module reloading
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
    }

    # Serve backend (e.g., API requests)
    location /api {
      proxy_pass http://backend:3001;   # Pass traffic to the backend service
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      # WebSocket support for the backend
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
    }

    # WebSocket proxy for Next.js HMR (Hot Module Replacement)
    location /_next/webpack-hmr {
      proxy_pass http://frontend:3000/_next/webpack-hmr;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $host;
      proxy_cache_bypass $http_upgrade;
    }
  }
}
